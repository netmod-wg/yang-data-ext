# -*- org -*-

This document describes YANG mechanisms for
defining abstract data structures with YANG.
It is intended to replace and extend
the "yang-data" extension statement
defined in RFC 8040.

* Introduction

There is a need for standard mechanisms to allow the
definition of abstract data that is not intended to
be implemented as configuration or operational state.
The "yang-data" extension statement from RFC 8040 ^RFC8040^
was defined for this purpose but it is limited in its
functionality.

The intended use of the "yang-data" extension was to model all or part
of a protocol message, such as the "errors" definition in the YANG
module "ietf-restconf" ^RFC8040^, or the contents of a file.  However,
protocols are often layered such that the header or payload portions
of the message can be extended by external documents.  The YANG
statements that model a protocol need to support this extensibility
that is already found in that protocol.

The "yang-data" extension from ^RFC8040^ has been copied here, renamed
to "structure", and updated to be more flexible.  There is no
requirement for the "structure" statement to result in exactly one
container object.  There is no assumption that a YANG data
structure can only be used as a top-level abstraction, instead of
nested within some other data structure.

This document also defines a new YANG extension statement called
"augment-structure", which allows abstract data structures to be
augmented from external modules, similar to the existing YANG
"augment" statement.  Note that "augment" cannot be used to augment a
YANG data structure since a YANG compiler or other tool is not
required to understand the "structure" extension.

** Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 ^RFC2119^ ^RFC8174^ when, and only when, they appear in all
capitals, as shown here.

The following terms are used within this document:

- YANG data structure: A data structure defined with the "structure"
  statement.

*** NMDA

The following terms are defined in the
Network Management Datastore Architecture
(NMDA) ^RFC8342^.
and are not redefined here:

- configuration
- operational state

*** YANG

The following terms are defined in ^RFC7950^:

- absolute-schema-nodeid
- container
- data definition statement
- data node
- leaf
- leaf-list
- list

* YANG Data Structure Extensions Module @mod@

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-figure ietf-yang-structure-ext.yang extract-to="ietf-yang-structure-ext@2019-03-02.yang"

* IANA Considerations @iana@

** YANG Module Registry

This document registers one URI as a namespace in the
"IETF XML Registry" ^RFC3688^:

    URI: urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext
    Registrant Contact: The IESG.
    XML: N/A; the requested URI is an XML namespace.

This document registers one YANG module in the "YANG Module Names"
registry ^RFC6020^:

    name:         ietf-yang-structure-ext
    namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext
    prefix:       sx
    // RFC Ed.: replace XXXX with RFC number and remove this note
    reference:    RFC XXXX

* Security Considerations

This document defines YANG extensions that are used to define
conceptual YANG data structures.  It does not introduce any new
vulnerabilities beyond those specified in YANG 1.1 ^RFC7950^.

# * Acknowledgments

*! start-appendix

* Examples

** "structure" Example

This example shows a simple address book that could be stored as an
artifact.

!! include-figure example-module.yang

** "augment-structure" Example

This example adds "county" and "zipcode" leafs to the address book:

!! include-figure example-module-aug.yang

** XML Encoding Example

This example shows how an address book can be encoded in XML:

!! include-figure ex1.xml

** JSON Encoding Example

This example shows how an address book can be encoded in JSON:

!! include-figure ex1.json

* Change Log

RFC Ed.: remove this section before publication.

** v01 to v02

- terminology fixes (use the term "structure" instead of "template")
- renamed the statement to "structure" from "yang-data"
- removed limitations on if-feature and identities in YANG structures

** v00 to v01

- moved open issues to github
- added examples section
- filled in IANA considerations

* Open Issues

RFC Ed.: remove this section before publication.

The YANG Data Extensions issues are tracked on github.com:

   https://github.com/netmod-wg/yang-data-ext/issues

{{document:
    name ;
    ipr trust200902;
    category std;
    references references.xml;
    title "YANG Data Extensions";
    abbreviation "YANG Data Extensions";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Cisco:mbj@tail-f.com";
    contributor "author:Kent Watsen:Watsen Networks:kwatsen@watsen.net";
}}
